//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DTO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDbEntities : DbContext
    {
        public TestDbEntities()
            : base("name=TestDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AddEmployees(string firstname, string lastname, Nullable<long> phoneno, string gender, string state, string country)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var phonenoParameter = phoneno.HasValue ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(long));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddEmployees", firstnameParameter, lastnameParameter, phonenoParameter, genderParameter, stateParameter, countryParameter);
        }
    
        public virtual int Addstudent(Nullable<int> si, string fn, string ln, string gn, Nullable<long> pn, string st, string cn)
        {
            var siParameter = si.HasValue ?
                new ObjectParameter("si", si) :
                new ObjectParameter("si", typeof(int));
    
            var fnParameter = fn != null ?
                new ObjectParameter("fn", fn) :
                new ObjectParameter("fn", typeof(string));
    
            var lnParameter = ln != null ?
                new ObjectParameter("ln", ln) :
                new ObjectParameter("ln", typeof(string));
    
            var gnParameter = gn != null ?
                new ObjectParameter("gn", gn) :
                new ObjectParameter("gn", typeof(string));
    
            var pnParameter = pn.HasValue ?
                new ObjectParameter("pn", pn) :
                new ObjectParameter("pn", typeof(long));
    
            var stParameter = st != null ?
                new ObjectParameter("st", st) :
                new ObjectParameter("st", typeof(string));
    
            var cnParameter = cn != null ?
                new ObjectParameter("cn", cn) :
                new ObjectParameter("cn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Addstudent", siParameter, fnParameter, lnParameter, gnParameter, pnParameter, stParameter, cnParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Addstudents(Nullable<int> studentid, string firstname, string lastname, string gender, Nullable<long> phoneno, string state, string country)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var phonenoParameter = phoneno.HasValue ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(long));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Addstudents", studentidParameter, firstnameParameter, lastnameParameter, genderParameter, phonenoParameter, stateParameter, countryParameter);
        }
    
        public virtual int DeleteEmployees(Nullable<int> employeid)
        {
            var employeidParameter = employeid.HasValue ?
                new ObjectParameter("Employeid", employeid) :
                new ObjectParameter("Employeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployees", employeidParameter);
        }
    
        public virtual int DeleteProcedure(string st, string cn, Nullable<int> si)
        {
            var stParameter = st != null ?
                new ObjectParameter("st", st) :
                new ObjectParameter("st", typeof(string));
    
            var cnParameter = cn != null ?
                new ObjectParameter("cn", cn) :
                new ObjectParameter("cn", typeof(string));
    
            var siParameter = si.HasValue ?
                new ObjectParameter("si", si) :
                new ObjectParameter("si", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProcedure", stParameter, cnParameter, siParameter);
        }
    
        public virtual int Deletestudent(Nullable<int> si)
        {
            var siParameter = si.HasValue ?
                new ObjectParameter("si", si) :
                new ObjectParameter("si", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletestudent", siParameter);
        }
    
        public virtual int Deletestudent1(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletestudent1", studentidParameter);
        }
    
        public virtual ObjectResult<GetEmployees_Result> GetEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees");
        }
    
        public virtual ObjectResult<GetStudentdata_Result> GetStudentdata()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentdata_Result>("GetStudentdata");
        }
    
        public virtual int Myprocedure2(Nullable<int> si, string fn, string ln, string gn, Nullable<long> pn, string st, string cn)
        {
            var siParameter = si.HasValue ?
                new ObjectParameter("si", si) :
                new ObjectParameter("si", typeof(int));
    
            var fnParameter = fn != null ?
                new ObjectParameter("fn", fn) :
                new ObjectParameter("fn", typeof(string));
    
            var lnParameter = ln != null ?
                new ObjectParameter("ln", ln) :
                new ObjectParameter("ln", typeof(string));
    
            var gnParameter = gn != null ?
                new ObjectParameter("gn", gn) :
                new ObjectParameter("gn", typeof(string));
    
            var pnParameter = pn.HasValue ?
                new ObjectParameter("pn", pn) :
                new ObjectParameter("pn", typeof(long));
    
            var stParameter = st != null ?
                new ObjectParameter("st", st) :
                new ObjectParameter("st", typeof(string));
    
            var cnParameter = cn != null ?
                new ObjectParameter("cn", cn) :
                new ObjectParameter("cn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Myprocedure2", siParameter, fnParameter, lnParameter, gnParameter, pnParameter, stParameter, cnParameter);
        }
    
        public virtual int UpdateEmployees(Nullable<int> employeid, string state, string country)
        {
            var employeidParameter = employeid.HasValue ?
                new ObjectParameter("Employeid", employeid) :
                new ObjectParameter("Employeid", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployees", employeidParameter, stateParameter, countryParameter);
        }
    
        public virtual int Updateprocedure(string state, string country, Nullable<int> studentid)
        {
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updateprocedure", stateParameter, countryParameter, studentidParameter);
        }
    }
}
